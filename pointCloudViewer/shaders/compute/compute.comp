#version 430 core

layout (local_size_x = 10, local_size_y = 1, local_size_z = 1) in;

// ----------------------------------------------------------------------------
//
// uniforms
//
// ----------------------------------------------------------------------------

//layout(rgba32f, binding = 0) uniform image2D imgOutput;

// layout (location = 0) uniform float t;                 /** Time */
layout( location = 1 ) uniform mat4 model;
layout( location = 2 ) uniform mat4 view;
layout( location = 3 ) uniform mat4 projection;


struct vertex
{
	float x,y,z,w;
	float r,g,b,a;
};
layout( std430, binding=4 ) buffer input_data
{
	vertex input[]; // array of structures
};
// layout( std430, binding=6 ) buffer Col
// {
// 	vec4 Colors[ ]; // array of structures
// };

layout( std430, binding=5 ) buffer output_data
{
	vertex _output[]; // array of structures

};

// layout( std430, binding=7 ) buffer Col_output
// {
// 	vec4 Color_output[];

// };
// ----------------------------------------------------------------------------
//
// functions
//
// ----------------------------------------------------------------------------

void main() 
{
	uint idx = (gl_GlobalInvocationID.x);
	vec4 result = projection * view * model * vec4(input[idx].x,input[idx].y,input[idx].z,input[idx].w);
	_output[idx].x = result.x;
	_output[idx].y = result.y;
	_output[idx].z = result.z;
	_output[idx].w = result.w;
	vec4 col = vec4(input[idx].r,input[idx].g,input[idx].b,input[idx].a);
	_output[idx].r = col.r;
	_output[idx].g = col.g;
	_output[idx].b = col.b;
	_output[idx].a = col.a;
}